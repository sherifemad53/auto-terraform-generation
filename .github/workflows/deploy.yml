# This script will trigger on every new yaml file added to configs/ and deploy a new terraform project

name: Auto Generate Terraform Project

on:
  push:
    paths:
      - "configs/*.yaml"
  
  workflow_dispatch:

jobs:
  generate:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write

    env:
      GH_OWNER: sherifemad53
      TF_STATE_BUCKET: my-terraform-states-konecta
      AWS_REGION: us-east-1

    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4

      - name: Setup Python and Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5
        
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: setup git
        run: |
          git config --global init.defaultBranch main
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}


      - name: Install dependencies
        run: pip install pyyaml

      # - name: Find project YAML file
      #   id: project
      #   run: |
      #     FILE=$(ls configs/*.yaml | head -n 1)
      #     NAME=$(basename "$FILE" .yaml)
      #     echo "project_name=$NAME" >> $GITHUB_OUTPUT
      
      # - name: Check if GitHub repo exists
      #   id: repo_check
      #   env:
      #     GH_TOKEN: ${{ secrets.GH_TOKEN }}
      #   run: |
      #     REPO="${{ env.GH_OWNER }}/${{ steps.project.outputs.project_name }}"
      #     if gh api "repos/$REPO" &>/dev/null; then
      #       echo "Repo '$REPO' exists."
      #     else
      #       echo "Creating repo '$REPO_NAME'..."
      #       gh repo create $REPO --public --description "Auto-generated Terraform project" --confirm
      #     fi

      # - name: Generate Terraform project
      #   run: python3 scripts/deploy.py configs/${{ steps.project.outputs.project_name }}.yaml

      # - name: Commit .terraform.lock.hcl for provider tracking
      #   run: |
      #     cd generated-projects/${{ steps.project.outputs.project_name }}
      #     terraform init -upgrade
      #     terraform providers lock -platform=linux_amd64
      #     git add .terraform.lock.hcl
      #     git commit -m "Track provider versions" || true

      - name: Process each YAML config
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          mkdir -p generated-projects

          for FILE in configs/*.yaml; do
            NAME=$(basename "$FILE" .yaml)
            echo "Processing project: $NAME"

            # Generate Terraform project
            python3 scripts/deploy.py "$FILE"

            # Target repo info
            REPO="${GH_OWNER}/${NAME}"
            TARGET_DIR="generated-projects/${NAME}"

            # Create repo if not exists
            if ! gh api "repos/$REPO" &>/dev/null; then
              echo "🪄 Creating new repo $REPO..."
              gh repo create "$REPO" --public --description "Auto-generated Terraform project" --confirm
            else
              echo "✅ Repo $REPO already exists"
            fi

            # Clone or update repo
            if [ -d "$TARGET_DIR/.git" ]; then
              echo "🔄 Pulling latest changes for $REPO..."
              cd "$TARGET_DIR"
              git pull origin main || true
              cd - >/dev/null
            else
              echo "⬇️ Cloning $REPO..."
              rm -rf "$TARGET_DIR"
              git clone "https://x-access-token:${GH_TOKEN}@github.com/${REPO}.git" "$TARGET_DIR"
            fi

            # Copy generated files
            echo "📦 Updating Terraform code..."
            cp -r "$NAME"/* "$TARGET_DIR"/

            # Commit and push
            cd "$TARGET_DIR"
            git add .
            if ! git diff --cached --quiet; then
              git commit -m "Update Terraform configuration from controller"
              git push origin main
            else
              echo "No changes to push."
            fi
            
            echo "🔧 Initializing Terraform with S3 backend..."
            terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ NAME }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"

            echo "📋 Running Terraform plan..."
            terraform plan

            echo "🚀 Applying Terraform configuration..."
            terraform apply -auto-approve

            cd - >/dev/null

            echo "✅ Project $NAME synced successfully."
          done


      # - name: List generated files
      #   run: ls -la generated-projects/${{ steps.project.outputs.project_name }}

      # - name: Push generated Terraform to target repo
      #   run: |
      #     cd generated-projects/${{ steps.project.outputs.project_name }}
      #     git init
      #     git branch -M main
      #     git add .
      #     git commit -m "Initial commit"
      #     git remote add origin https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository_owner }}/${{ steps.project.outputs.project_name }}.git
      #     git push -u origin main
          

      - name: Terraform Apply
        run: |
          cd $(basename ${{ github.event.inputs.config_file }} .yaml)
          