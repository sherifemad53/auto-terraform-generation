# This script will trigger on every new yaml file added to configs/ and deploy a new terraform project

name: Auto Generate Terraform Project

on:
  push:
    paths:
      - "configs/*.yaml"
  
  workflow_dispatch:

jobs:
  generate:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write

    env:
      GH_OWNER: sherifemad53
      TF_STATE_BUCKET: my-terraform-states
      AWS_REGION: us-east-1

    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4

      - name: Setup Python and Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5
        
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: changing defualt branch naming to main
        run: |
          git config --global init.defaultBranch main

      - name: Install dependencies
        run: pip install pyyaml

      - name: Find project YAML file
        id: project
        run: |
          FILE=$(ls configs/*.yaml | head -n 1)
          NAME=$(basename "$FILE" .yaml)
          echo "project_name=$NAME" >> $GITHUB_OUTPUT

      - name: Generate Terraform project
        run: python3 scripts/deploy.py configs/${{ steps.project.outputs.project_name }}.yaml

      - name: List generated files
        run: ls -la generated-projects/${{ steps.project.outputs.project_name }}

      - name: Check if GitHub repo exists
        id: repo_check
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          REPO="${{ env.GH_OWNER }}/${{ steps.project.outputs.project_name }}"
          if gh api "repos/$REPO" &>/dev/null; then
            echo "Repo '$REPO' exists."
          else
            echo "Creating repo '$REPO_NAME'..."
            gh repo create $REPO --public --description "Auto-generated Terraform project" --confirm
          fi

      - name: Configure git user
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"


      - name: Push generated Terraform to target repo
        run: |
          cd generated-projects/${{ steps.project.outputs.project_name }}
          git init
          git branch -M main
          git add .
          git commit -m "Initial commit"
          git remote add origin https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository_owner }}/${{ steps.project.outputs.project_name }}.git
          git push -u origin main


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Terraform with AWS S3 backend
        working-directory: ${{ steps.project.outputs.project_name }}
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ steps.project.outputs.project_name }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"

      - name: Terraform Plan
        run: |
          cd $(basename ${{ github.event.inputs.config_file }} .yaml)
          terraform plan

      - name: Terraform Apply
        run: |
          cd $(basename ${{ github.event.inputs.config_file }} .yaml)
          terraform apply -auto-approve